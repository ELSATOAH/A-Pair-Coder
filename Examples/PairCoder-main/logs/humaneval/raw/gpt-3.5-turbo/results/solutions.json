{
    "raw": {
        "0": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    print(has_close_elements(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 7,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "1": {
            "iteration_0": {}
        },
        "2": {
            "iteration_0": {
                "solution": "import math\n\ndef truncate_number(number: float) -> float:\n    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\nif __name__ == \"__main__\":\n    print(truncate_number(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "3": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    prefix_sum = 0\n    seen = set()\n    for i in range(len(operations)):\n        prefix_sum += operations[i]\n        if prefix_sum in seen or prefix_sum < 0:\n            return True\n        seen.add(prefix_sum)\n    return False\n\nif __name__ == \"__main__\":\n    print(below_zero(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 4,
                "test_failed_private": 2,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "4": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = 0\n    for num in numbers:\n        sum_abs_diff += abs(num - mean)\n    return sum_abs_diff / len(numbers)\n\nif __name__ == \"__main__\":\n    print(mean_absolute_deviation(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "5": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\nif __name__ == \"__main__\":\n    print(intersperse(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "6": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(group: str) -> int:\n        stack = []\n        max_level = 0\n        current_level = 0\n\n        for char in group:\n            if char == '(':\n                stack.append('(')\n                current_level = len(stack)\n            elif char == ')':\n                stack.pop()\n                current_level = len(stack)\n\n            max_level = max(max_level, current_level)\n\n        return max_level\n\n    groups = paren_string.split()\n    result = [max_nesting_level(group) for group in groups]\n    return result\n\nif __name__ == \"__main__\":\n    print(parse_nested_parens(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "7": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    if not strings:\n        return filtered_strings\n    if not substring:\n        return strings\n\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\n    return filtered_strings\n\nif __name__ == \"__main__\":\n    print(filter_by_substring(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 4,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "8": {
            "iteration_0": {
                "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return total_sum, total_product\n\nif __name__ == \"__main__\":\n    print(sum_product(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 5,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "9": {
            "iteration_0": {
                "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_values = []\n    for i in range(len(numbers)):\n        rolling_max_values.append(max(numbers[:i+1]))\n    return rolling_max_values\n\nif __name__ == \"__main__\":\n    print(rolling_max(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 4,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "10": {
            "iteration_0": {
                "solution": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\n    return string\n\nif __name__ == \"__main__\":\n    print(make_palindrome(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 5,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "11": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            result += '1'\n        else:\n            result += '0'\n    return result\n\nif __name__ == \"__main__\":\n    print(string_xor(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "12": {
            "iteration_0": {
                "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\nif __name__ == \"__main__\":\n    print(longest(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "13": {
            "iteration_0": {
                "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 4,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "14": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\nif __name__ == \"__main__\":\n    print(all_prefixes(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "15": {
            "iteration_0": {
                "solution": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.rstrip()\n\nif __name__ == \"__main__\":\n    print(string_sequence(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "16": {
            "iteration_0": {
                "solution": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    lowercase_string = string.lower()\n    for char in lowercase_string:\n        unique_chars.add(char)\n    return len(unique_chars)\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 5,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "17": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beat_mapping = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    result = []\n    notes = music_string.split()\n    for note in notes:\n        result.append(beat_mapping[note])\n    return result\n\nif __name__ == \"__main__\":\n    print(parse_music(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 5,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "18": {
            "iteration_0": {
                "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring or len(substring) > len(string):\n        return count\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\nif __name__ == \"__main__\":\n    print(how_many_times(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 4,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "19": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numerals = numbers.split()\n    numerals.sort(key=lambda x: numeral_to_number[x])\n\n    return ' '.join(numerals)\n\nif __name__ == \"__main__\":\n    print(sort_numbers(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 5,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        }
    }
}