{
    "raw": {
        "0": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    print(has_close_elements(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 7,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "1": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        current_group += char\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            result.append(current_group)\n            current_group = \"\"\n    return result\n\nif __name__ == \"__main__\":\n    print(separate_paren_groups(input()))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 4,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "2": {
            "iteration_0": {
                "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\nif __name__ == \"__main__\":\n    try:\n        print(truncate_number(eval(input())))\n    except (ValueError, TypeError):\n        print(\"Invalid input. Please enter a valid float.\")",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "3": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(below_zero(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 6,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "4": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\nif __name__ == \"__main__\":\n    numbers = [float(x) for x in input(\"Enter a list of numbers: \").strip('[]').split(',')]\n    print(mean_absolute_deviation(numbers))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "5": {
            "iteration_0": {
                "solution": "from typing import List\nimport itertools\n\ndef intersperse(args: tuple) -> List[int]:\n    numbers, delimiter = args\n    pairs = zip(numbers, itertools.repeat(delimiter))\n    flattened = itertools.chain.from_iterable(pairs)\n    return list(flattened)\n\nif __name__ == \"__main__\":\n    print(intersperse(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "6": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split(' '):\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths\n\nif __name__ == \"__main__\":\n    print(parse_nested_parens(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "7": {
            "iteration_0": {
                "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\nif __name__ == \"__main__\":\n    print(filter_by_substring(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "8": {
            "iteration_0": {
                "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers)\n    total_product = 0 if not numbers else 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product\n\nif __name__ == \"__main__\":\n    print(sum_product(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "9": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_num = float('-inf')\n    result = []\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result\n\nif __name__ == \"__main__\":\n    print(rolling_max(*eval(input())))\n```\nAnswer:",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "10": {
            "iteration_0": {
                "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix = string[:i]\n            break\n    return string + prefix[::-1]\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter a string: \")\n    print(make_palindrome(user_input))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "11": {
            "iteration_0": {
                "solution": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        min_len = min(len(a), len(b))\n        a = a[:min_len]\n        b = b[:min_len]\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\nif __name__ == \"__main__\":\n    print(string_xor(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "12": {
            "iteration_0": {
                "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str\n\nif __name__ == \"__main__\":\n    strings = input().strip().split()  # Input should be space-separated strings\n    print(longest(strings))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "13": {
            "iteration_0": {
                "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "14": {
            "iteration_0": {
                "solution": "import sys\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(1, len(string)+1)]\n\nif __name__ == \"__main__\":\n    print(all_prefixes(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "15": {
            "iteration_0": {
                "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))\n\nif __name__ == \"__main__\":\n    print(string_sequence(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "16": {
            "iteration_0": {
                "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "17": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_list = music_string.split()\n    return [notes.get(note, 0) for note in music_list]\n\nif __name__ == \"__main__\":\n    print(parse_music(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "18": {
            "iteration_0": {
                "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start != -1:\n        start = string.find(substring, start + 1)\n        if start == -1:\n            break\n        count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(how_many_times(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "19": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef sort_numbers(numbers: List[str]) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers, key=lambda x: num_dict.get(x, float('inf')))\n    return ' '.join(sorted_nums)\n\nif __name__ == \"__main__\":\n    print(sort_numbers(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "20": {
            "iteration_0": {
                "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 1)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result\n\nif __name__ == \"__main__\":\n    print(find_closest_elements(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "21": {
            "iteration_0": {
                "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n\nif __name__ == \"__main__\":\n    print(rescale_to_unit(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "22": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef filter_integers(values: List[str]) -> List[int]:\n    integers = []\n    for val in values:\n        try:\n            integers.append(int(val))\n        except ValueError:\n            pass\n    return integers\n\nif __name__ == \"__main__\":\n    print(filter_integers(input().split(',')))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "23": {
            "iteration_0": {
                "solution": "def strlen(string: str) -> int:\n    return len(string)\n\nif __name__ == \"__main__\":\n    print(strlen(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "24": {
            "iteration_0": {
                "solution": "def largest_divisor(n: int) -> int:\n    if n == 1:\n        return 1\n    return max([i for i in range(1, n) if n % i == 0])\n\nif __name__ == \"__main__\":\n    print(largest_divisor(int(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "25": {
            "iteration_0": {
                "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\nif __name__ == \"__main__\":\n    print(factorize(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 8,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "26": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "27": {
            "iteration_0": {
                "solution": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\nif __name__ == \"__main__\":\n    print(flip_case(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "28": {
            "iteration_0": {
                "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n\nif __name__ == \"__main__\":\n    print(concatenate(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "29": {
            "iteration_0": {
                "solution": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n\nif __name__ == \"__main__\":\n    print(filter_by_prefix(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 2,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "30": {
            "iteration_0": {
                "solution": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter a list of numbers in the format '[1, 2, 3]': \")\n    nums = [int(num) for num in user_input.strip('[]').split(',')]\n    print(get_positive(nums))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "31": {
            "iteration_0": {
                "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_prime(int(input(\"Enter a number to check for primality: \")))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 7,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 13,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "32": {
            "iteration_0": {
                "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    zero_points = [i for i in range(-1000, 1000) if poly(xs, i) == 0]\n    if zero_points:\n        return max(zero_points, key=abs)\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    print(find_zero(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 100,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "33": {
            "iteration_0": {
                "solution": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n    \n    return result\n\nif __name__ == \"__main__\":\n    print(sort_third(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 10,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "34": {
            "iteration_0": {
                "solution": "def unique(l: list):\n    return sorted(list(set(l)))\n\nif __name__ == \"__main__\":\n    print(unique(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 1,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "35": {
            "iteration_0": {
                "solution": "def max_element(l: list):\n    return max(l)\n\nif __name__ == \"__main__\":\n    print(max_element([int(num) for num in input().split()]))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 2,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "36": {
            "iteration_0": {
                "solution": "def fizz_buzz(n: int):\n    if n == 0:\n        return 0\n    \n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(fizz_buzz(*eval(input(\"Enter a number: \"))))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 8,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "37": {
            "iteration_0": {
                "solution": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_copy = even_indices.copy()  # Create a copy of even_indices\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_copy.pop(0))\n        else:\n            result.append(l[i])\n    return result\n\nif __name__ == \"__main__\":\n    print(sort_even(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "38": {
            "iteration_0": {
                "solution": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\nif __name__ == \"__main__\":\n    print(encode_cyclic(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 100,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "39": {
            "iteration_0": {
                "solution": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and fibonacci(num) == num:\n            count += 1\n    return num\n\nif __name__ == \"__main__\":\n    print(prime_fib(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 10,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "40": {
            "iteration_0": {
                "solution": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nif __name__ == \"__main__\":\n    print(triples_sum_to_zero(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 9,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "41": {
            "iteration_0": {
                "solution": "def car_race_collision(n: int):\n    return n * (n - 1)\n\nif __name__ == \"__main__\":\n    print(car_race_collision(*eval(input(\"Enter a number: \")))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "42": {
            "iteration_0": {
                "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\nif __name__ == \"__main__\":\n    print(incr_list(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "43": {
            "iteration_0": {
                "solution": "def pairs_sum_to_zero(*args):\n    l = args\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    print(pairs_sum_to_zero(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 9,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "44": {
            "iteration_0": {
                "solution": "def change_base(x: int, base: int):\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res\n\nif __name__ == \"__main__\":\n    print(change_base(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 12,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "45": {
            "iteration_0": {
                "solution": "def triangle_area(a, h):\n    return 0.5 * a * h\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter the base length (a): \"))\n    h = float(input(\"Enter the height (h): \"))\n    print(triangle_area(a, h))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 3,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "46": {
            "iteration_0": {
                "solution": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    \n    a, b, c, d = 0, 1, 1, 2\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n\nif __name__ == \"__main__\":\n    print(fib4(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "47": {
            "iteration_0": {
                "solution": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\nif __name__ == \"__main__\":\n    print(median(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "48": {
            "iteration_0": {
                "solution": "def is_palindrome(text: str):\n    return text == text[::-1]\n\nif __name__ == \"__main__\":\n    print(is_palindrome(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 4,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "49": {
            "iteration_0": {
                "solution": "def modp(n: int, p: int):\n    return pow(2, n, p)\n\nif __name__ == \"__main__\":\n    print(modp(*eval(input(\"Enter two integers separated by a comma: \"))))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "50": {
            "iteration_0": {
                "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\nif __name__ == \"__main__\":\n    print(decode_shift(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 100,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "51": {
            "iteration_0": {
                "solution": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\nif __name__ == \"__main__\":\n    print(remove_vowels(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 6,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "52": {
            "iteration_0": {
                "solution": "import ast\n\ndef below_threshold(l: list, t: int):\n    return all(num < t for num in l)\n\nif __name__ == \"__main__\":\n    print(below_threshold(*ast.literal_eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 6,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "53": {
            "iteration_0": {
                "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == \"__main__\":\n    x = int(input(\"Enter the first number: \"))\n    y = int(input(\"Enter the second number: \"))\n    print(add(x, y))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 105,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "54": {
            "iteration_0": {
                "solution": "def same_chars(s0: str, s1: str):\n    s0 = ''.join(s0.split())\n    s1 = ''.join(s1.split())\n    return sorted(s0) == sorted(s1)\n\nif __name__ == \"__main__\":\n    s0, s1 = input().split()\n    print(same_chars(s0, s1))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 6,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "55": {
            "iteration_0": {
                "solution": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nif __name__ == \"__main__\":\n    print(fib(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "56": {
            "iteration_0": {
                "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 4,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 12,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "57": {
            "iteration_0": {
                "solution": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\nif __name__ == \"__main__\":\n    print(monotonic(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 8,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "58": {
            "iteration_0": {
                "solution": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\nif __name__ == \"__main__\":\n    print(common(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "59": {
            "iteration_0": {
                "solution": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n if n > i else i\n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "60": {
            "iteration_0": {
                "solution": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n\nif __name__ == \"__main__\":\n    print(sum_to_n(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "61": {
            "iteration_0": {
                "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 4,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 12,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "62": {
            "iteration_0": {
                "solution": "def derivative(xs: list):\n    return [xs[i] * i for i in range(len(xs))]\n\nif __name__ == \"__main__\":\n    print(derivative(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "63": {
            "iteration_0": {
                "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c\n\nif __name__ == \"__main__\":\n    print(fibfib(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "64": {
            "iteration_0": {
                "solution": "def vowels_count(s):\n    if not s:\n        return 0\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s if char.lower() in vowels)\n\nif __name__ == \"__main__\":\n    print(vowels_count(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "65": {
            "iteration_0": {
                "solution": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\nif __name__ == \"__main__\":\n    try:\n        print(circular_shift(*eval(input(\"Enter a tuple with two elements (number to shift, amount of shift): \")))\n    except:\n        print(\"Error: Please provide valid input in the form of a tuple.\")",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "66": {
            "iteration_0": {
                "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\nif __name__ == \"__main__\":\n    print(digitSum(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 6,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 8,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "67": {
            "iteration_0": {
                "solution": "def fruit_distribution(s, n):\n    try:\n        apples = int(s.split()[0])\n        oranges = int(s.split()[-1])\n        return n - apples - oranges\n    except (IndexError, ValueError):\n        return \"Invalid input format\"\n\nif __name__ == \"__main__\":\n    s = input(\"Enter the number of apples and oranges separated by space: \")\n    n = int(input(\"Enter the total number of fruits: \"))\n    print(fruit_distribution(s, n))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 4,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "68": {
            "iteration_0": {
                "solution": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even and i < smallest_index:\n            smallest_index = i\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]\n\nif __name__ == \"__main__\":\n    data = list(map(int, input().split()))\n    print(pluck(data))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 4,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 8,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "69": {
            "iteration_0": {
                "solution": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n\n    return result\n\nif __name__ == \"__main__\":\n    print(search(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 25,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "70": {
            "iteration_0": {
                "solution": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 1:\n        result.append(lst.pop(0))\n        if len(lst) > 1:\n            result.append(lst.pop())\n    return result\n\nif __name__ == \"__main__\":\n    print(strange_sort_list(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 9,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "71": {
            "iteration_0": {
                "solution": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0  # Ensure float division\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2) if area >= 0 else -1\n    return -1\n\nif __name__ == \"__main__\":\n    print(triangle_area(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 9,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "72": {
            "iteration_0": {
                "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nif __name__ == \"__main__\":\n    print(will_it_fly(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 6,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "73": {
            "iteration_0": {
                "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n\nif __name__ == \"__main__\":\n    arr = [int(x) for x in input().split()]\n    print(smallest_change(arr))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "74": {
            "iteration_0": {
                "solution": "import ast\n\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\nif __name__ == \"__main__\":\n    print(total_match(*ast.literal_eval(input(\"Enter two lists as a tuple: \")))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 9,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "75": {
            "iteration_0": {
                "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\nif __name__ == \"__main__\":\n    print(is_multiply_prime(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 10,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "76": {
            "iteration_0": {
                "solution": "import math\n\ndef is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n > 1 and x == n**int(round(math.log(x, n))))\n\nif __name__ == \"__main__\":\n    print(is_simple_power(*eval(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 6,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 10,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "77": {
            "iteration_0": {
                "solution": "def iscube(a):\n    if a == 0:\n        return True\n    return round(a ** (1/3)) ** 3 == a\n\nif __name__ == \"__main__\":\n    print(iscube(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 6,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 16,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "78": {
            "iteration_0": {
                "solution": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit.upper() in primes)\n    return count\n\nif __name__ == \"__main__\":\n    print(hex_key(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 5,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 13,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "79": {
            "iteration_0": {
                "solution": "def decimal_to_binary(decimal):\n    try:\n        binary = bin(int(decimal))[2:]\n        return f\"db{binary}db\"\n    except ValueError:\n        return \"Invalid input\"\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 2,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "80": {
            "iteration_0": {
                "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))\n\nif __name__ == \"__main__\":\n    print(is_happy(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 6,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 8,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "81": {
            "iteration_0": {
                "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nif __name__ == \"__main__\":\n    print(*numerical_letter_grade(eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 6,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "82": {
            "iteration_0": {
                "solution": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\nif __name__ == \"__main__\":\n    print(prime_length(input()))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 4,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 16,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "83": {
            "iteration_0": {
                "solution": "def starts_one_ends(n):\n    count = 9 * 10 ** (n - 1) - 8 ** n\n    return count\n\nif __name__ == \"__main__\":\n    print(starts_one_ends(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "84": {
            "iteration_0": {
                "solution": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n\nif __name__ == \"__main__\":\n    print(solve(int(input())).lstrip('0'))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 3,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 5,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "85": {
            "iteration_0": {
                "solution": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\nif __name__ == \"__main__\":\n    print(add(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 4,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "86": {
            "iteration_0": {
                "solution": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\nif __name__ == \"__main__\":\n    print(anti_shuffle(input()))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 7,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "87": {
            "iteration_0": {
                "solution": "import threading\n\ndef get_row_with_timeout(lst, x, timeout):\n    result = []\n    timeout_flag = False\n    \n    def check_timeout():\n        nonlocal timeout_flag\n        timeout_flag = True\n    \n    timer = threading.Timer(timeout, check_timeout)\n    timer.start()\n    \n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n            if timeout_flag:\n                return \"Timeout occurred\"\n    \n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\nif __name__ == \"__main__\":\n    print(get_row_with_timeout(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 6,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "88": {
            "iteration_0": {}
        },
        "89": {
            "iteration_0": {
                "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char) - 2\n            if char.islower():\n                result += chr((shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n\nif __name__ == \"__main__\":\n    print(encrypt(input()))",
                "test_passed_public": 0,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "90": {
            "iteration_0": {
                "solution": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None\n\nif __name__ == \"__main__\":\n    lst = [int(x) for x in input().split()]\n    print(next_smallest(lst))",
                "test_passed_public": 0,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 7,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "91": {
            "iteration_0": {
                "solution": "def is_bored(S):\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n    sentences = S.split('?')\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n    sentences = S.split('!')\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n\nif __name__ == \"__main__\":\n    print(is_bored(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 6,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "92": {
            "iteration_0": {
                "solution": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False\n\nif __name__ == \"__main__\":\n    print(any_int(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 10,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "93": {
            "iteration_0": {
                "solution": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\nif __name__ == \"__main__\":\n    print(encode(input()))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "94": {
            "iteration_0": {
                "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum_of_digits(largest_prime)\n\nif __name__ == \"__main__\":\n    print(skjkasdkd(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 6,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 9,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "95": {
            "iteration_0": {
                "solution": "import signal\n\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)\n\nif __name__ == \"__main__\":\n    print(check_dict_case(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 5,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 14,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "96": {
            "iteration_0": {
                "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(count_up_to(n))",
                "test_passed_public": 0,
                "test_failed_public": 6,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 10,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "97": {
            "iteration_0": {
                "solution": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n\nif __name__ == \"__main__\":\n    print(multiply(*map(int, input().split())))",
                "test_passed_public": 0,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 16,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "98": {
            "iteration_0": {
                "solution": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_upper(\"Hello World\"))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 7,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "99": {
            "iteration_0": {
                "solution": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1\n\nif __name__ == \"__main__\":\n    print(closest_integer(input()))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "100": {
            "iteration_0": {
                "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(make_a_pile(n))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "101": {
            "iteration_0": {
                "solution": "def words_string(s):\n    return [word.strip(\",\") for word in s.split()]\n\nif __name__ == \"__main__\":\n    print(words_string(input()))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 6,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "102": {
            "iteration_0": {
                "solution": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n\nif __name__ == \"__main__\":\n    x, y = map(int, input().split())\n    print(choose_num(x, y))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "103": {
            "iteration_0": {}
        },
        "104": {
            "iteration_0": {
                "solution": "def unique_digits(*args):\n    x = args[0]\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])\n\nif __name__ == \"__main__\":\n    print(unique_digits(input().split()))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 4,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "105": {
            "iteration_0": {
                "solution": "def by_length(arr):\n    valid_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    filtered_arr = [num for num in arr if num in valid_nums]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = [num_to_name[num] for num in reversed_arr]\n    return result\n\nif __name__ == \"__main__\":\n    print(by_length(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "106": {
            "iteration_0": {
                "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nif __name__ == \"__main__\":\n    print(f(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 4,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "107": {
            "iteration_0": {
                "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "108": {
            "iteration_0": {
                "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(d) for d in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_nums(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "109": {
            "iteration_0": {
                "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n\nif __name__ == \"__main__\":\n    print(move_one_ball(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "110": {
            "iteration_0": {
                "solution": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"\n\nif __name__ == \"__main__\":\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    print(exchange(lst1, lst2))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 7,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "111": {
            "iteration_0": {
                "solution": "def histogram(test):\n    hist = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    result = {char: count for char, count in hist.items() if count == max_count}\n    return result\n\nif __name__ == \"__main__\":\n    print(histogram(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 5,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "112": {
            "iteration_0": {
                "solution": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]\n\nif __name__ == \"__main__\":\n    print(reverse_delete(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 9,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "113": {
            "iteration_0": {
                "solution": "def odd_count(lst):\n    return [\"the number of odd elements {} in the string {} of the input.\".format(sum(int(d) % 2 != 0 for d in s), i) for i, s in enumerate(lst, 1)]\n\nif __name__ == \"__main__\":\n    print(odd_count(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 3,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "114": {
            "iteration_0": {
                "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\nif __name__ == \"__main__\":\n    nums = [1, -2, 3, -1, 2]\n    print(minSubArraySum(nums))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 12,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "115": {
            "iteration_0": {
                "solution": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\nif __name__ == \"__main__\":\n    print(max_fill(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "116": {
            "iteration_0": {
                "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\nif __name__ == \"__main__\":\n    print(sort_array(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "117": {
            "iteration_0": {
                "solution": "def select_words(s, n):\n    words = s.split()\n    result = [word for word in words if sum(1 for letter in word if letter.lower() not in 'aeiou') == n]\n    return result\n\nif __name__ == \"__main__\":\n    print(select_words(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 5,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 14,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "118": {
            "iteration_0": {
                "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-3, -1, -1):\n        if word[i] in vowels and (i-1 >= 0) and (i+1 < len(word)) and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(*eval(input())))",
                "test_passed_public": 2,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 7,
                "test_failed_private": 6,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "119": {
            "iteration_0": {
                "solution": "def match_parens(lst):\n    open_count = lst.count('(')\n    close_count = lst.count(')')\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'\n\nif __name__ == \"__main__\":\n    print(match_parens(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 12,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "120": {
            "iteration_0": {}
        },
        "121": {
            "iteration_0": {
                "solution": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0 and i % 2 == 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even\n\nif __name__ == \"__main__\":\n    print(solution(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 7,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "122": {
            "iteration_0": {
                "solution": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)\n\nif __name__ == \"__main__\":\n    print(add_elements([12, 45, 78, 90, 5], 3))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "123": {
            "iteration_0": {
                "solution": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])\n\nif __name__ == \"__main__\":\n    print(get_odd_collatz(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 1,
                "test_passed_private": 0,
                "test_failed_private": 4,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "124": {
            "iteration_0": {
                "solution": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n\nif __name__ == \"__main__\":\n    print(valid_date(input()))",
                "test_passed_public": 0,
                "test_failed_public": 5,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 16,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "125": {
            "iteration_0": {
                "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\nif __name__ == \"__main__\":\n    print(split_words(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "126": {
            "iteration_0": {
                "solution": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)\n\nif __name__ == \"__main__\":\n    print(is_sorted(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 0,
                "test_timeout_public": 8,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 13,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "127": {
            "iteration_0": {
                "solution": "def intersection(start1, end1, start2, end2):\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    print(intersection(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 8,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "128": {
            "iteration_0": {}
        },
        "129": {
            "iteration_0": {
                "solution": "def minPath(grid, k):\n    N = len(grid)\n    visited = set()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n\n        visited.add((x, y))\n        next_paths = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                next_paths.append((grid[nx][ny], nx, ny))\n\n        next_paths.sort()\n        for val, nx, ny in next_paths:\n            res = dfs(nx, ny, path + [val])\n            if res:\n                return res\n\n        visited.remove((x, y))\n\n    for i in range(N):\n        for j in range(N):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res\n\nif __name__ == \"__main__\":\n    print(minPath(*eval(input()))",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 10,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "130": {
            "iteration_0": {
                "solution": "def tri(n):\n    seq = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq\n\nif __name__ == \"__main__\":\n    print(tri(int(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 10,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "131": {
            "iteration_0": {
                "solution": "def digits(n):\n    odd_product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n    return odd_product\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(digits(n))",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 7,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "132": {
            "iteration_0": {
                "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0\n\nif __name__ == \"__main__\":\n    print(is_nested(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 6,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 14,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "133": {
            "iteration_0": {
                "solution": "def sum_squares(lst):\n    return sum((int(x) + (1 if float(x) % 1 != 0 else 0))**2 for x in lst)\n\nif __name__ == \"__main__\":\n    print(sum_squares(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 5,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 12,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "134": {
            "iteration_0": {
                "solution": "def check_if_last_char_is_a_letter(txt):\n    if txt.strip() == '' or (txt[-1].isalpha() and txt[-2] == ' '):\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    print(check_if_last_char_is_a_letter(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 10,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        }
    }
}