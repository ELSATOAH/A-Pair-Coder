ALLUSERSPROFILE = "C:\\ProgramData"
APPDATA = "C:\\Users\\tayla\\AppData\\Roaming"
CHROME_CRASHPAD_PIPE_NAME = "\\\\.\\pipe\\crashpad_14092_ZVZVVQIEANSRAIQZ"
COMMONPROGRAMFILES = "C:\\Program Files\\Common Files"
"COMMONPROGRAMFILES(X86)" = "C:\\Program Files (x86)\\Common Files"
COMMONPROGRAMW6432 = "C:\\Program Files\\Common Files"
COMPUTERNAME = "TAYTOP"
COMSPEC = "C:\\WINDOWS\\system32\\cmd.exe"
CONFIGSETROOT = "C:\\WINDOWS\\ConfigSetRoot"
DRIVERDATA = "C:\\Windows\\System32\\Drivers\\DriverData"
EFC_9952_1262719628 = 1
EFC_9952_1592913036 = 1
EFC_9952_2283032206 = 1
EFC_9952_2775293581 = 1
EFC_9952_3789132940 = 1
HOMEDRIVE = "C:"
HOMEPATH = "\\Users\\tayla"
"INTELLIJ IDEA" = "C:\\Program Files\\JetBrains\\IntelliJ IDEA 2023.2.3\\bin;"
LOCALAPPDATA = "C:\\Users\\tayla\\AppData\\Local"
LOGONSERVER = "\\\\TAYTOP"
NUMBER_OF_PROCESSORS = 16
ONEDRIVE = "C:\\Users\\tayla\\OneDrive"
ONEDRIVECONSUMER = "C:\\Users\\tayla\\OneDrive"
ORIGINAL_XDG_CURRENT_DESKTOP = "undefined"
OS = "Windows_NT"
PATH = "C:\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda;C:\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\mingw-w64\bin;C:\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\usr\bin;C:\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\bin;C:\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Scripts;C:\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\bin;C:\Users\tayla\anaconda3\condabin;C:\Program Files\Eclipse Adoptium\jdk-11.0.21.9-hotspot\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0;C:\WINDOWS\System32\OpenSSH;C:\Program Files\Git\cmd;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit;C:\Users\tayla\AppData\Local\Microsoft\WindowsApps;C:\Users\tayla\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2023.2.3\bin;.;C:\Program Files\JetBrains\PyCharm 2023.2.3\bin;.;C:\Users\tayla\AppData\Local\Programs\MiKTeX\miktex\bin\x64;.;C:\Program Files\Eclipse Adoptium\jdk-11.0.21.9-hotspot\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Users\tayla\AppData\Local\Microsoft\WindowsApps;C:\Users\tayla\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2023.2.3\bin;;C:\Program Files\JetBrains\PyCharm 2023.2.3\bin;;C:\Users\tayla\AppData\Local\Programs\MiKTeX\miktex\bin\x64\\;"
PATHEXT = ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL"
PROCESSOR_ARCHITECTURE = "AMD64"
PROCESSOR_IDENTIFIER = "Intel64 Family 6 Model 154 Stepping 3, GenuineIntel"
PROCESSOR_LEVEL = 6
PROCESSOR_REVISION = "9a03"
PROGRAMDATA = "C:\\ProgramData"
PROGRAMFILES = "C:\\Program Files"
"PROGRAMFILES(X86)" = "C:\\Program Files (x86)"
PROGRAMW6432 = "C:\\Program Files"
PSMODULEPATH = "C:\\Users\\tayla\\OneDrive\\Dokumente\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules"
PUBLIC = "C:\\Users\\Public"
PYCHARM = "C:\\Program Files\\JetBrains\\PyCharm 2023.2.3\\bin;"
SESSIONNAME = "Console"
SYSTEMDRIVE = "C:"
SYSTEMROOT = "C:\\WINDOWS"
TEMP = "C:\\Users\\tayla\\AppData\\Local\\Temp"
TMP = "C:\\Users\\tayla\\AppData\\Local\\Temp"
USERDOMAIN = "TAYTOP"
USERDOMAIN_ROAMINGPROFILE = "TAYTOP"
USERNAME = "tayla"
USERPROFILE = "C:\\Users\\tayla"
VBOX_MSI_INSTALL_PATH = "C:\\Program Files\\Oracle\\VirtualBox\\"
WINDIR = "C:\\WINDOWS"
ZES_ENABLE_SYSMAN = 1
TERM_PROGRAM = "vscode"
TERM_PROGRAM_VERSION = "1.101.2"
LANG = "de_DE.UTF-8"
COLORTERM = "truecolor"
VSCODE_ENV_PREPEND = "PATH=C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda;C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\mingw-w64\bin;C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\usr\bin;C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\bin;C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Scripts;C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\bin;C\x3a\Users\tayla\anaconda3\condabin;C\x3a\Program Files\Eclipse Adoptium\jdk-11.0.21.9-hotspot\bin;C\x3a\Program Files\Common Files\Oracle\Java\javapath;C\x3a\Program Files (x86)\Common Files\Oracle\Java\javapath;C\x3a\WINDOWS\system32;C\x3a\WINDOWS;C\x3a\WINDOWS\System32\Wbem;C\x3a\WINDOWS\System32\WindowsPowerShell\v1.0;C\x3a\WINDOWS\System32\OpenSSH;C\x3a\Program Files\Git\cmd;C\x3a\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit;C\x3a\Users\tayla\AppData\Local\Microsoft\WindowsApps;C\x3a\Users\tayla\AppData\Local\Programs\Microsoft VS Code\bin;C\x3a\Program Files\JetBrains\IntelliJ IDEA 2023.2.3\bin;.;C\x3a\Program Files\JetBrains\PyCharm 2023.2.3\bin;.;C\x3a\Users\tayla\AppData\Local\Programs\MiKTeX\miktex\bin\x64;.;"
PYDEVD_DISABLE_FILE_VALIDATION = 1
VSCODE_DEBUGPY_ADAPTER_ENDPOINTS = "c:\\Users\\tayla\\.vscode\\extensions\\ms-python.debugpy-2025.8.0-win32-x64\\.noConfigDebugAdapterEndpoints\\endpoint-83921a6ecac62b76.txt"
BUNDLED_DEBUGPY_PATH = "c:\\Users\\tayla\\.vscode\\extensions\\ms-python.debugpy-2025.8.0-win32-x64\\bundled\\libs\\debugpy"
GIT_ASKPASS = "c:\\Users\\tayla\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh"
VSCODE_GIT_ASKPASS_NODE = "C:\\Users\\tayla\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"
VSCODE_GIT_ASKPASS_EXTRA_ARGS = ""
VSCODE_GIT_ASKPASS_MAIN = "c:\\Users\\tayla\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js"
VSCODE_GIT_IPC_HANDLE = "\\\\.\\pipe\\vscode-git-bc79956ad8-sock"
CONDA_DEFAULT_ENV = "C:\\Users\\tayla\\OneDrive\\Desktop\\ml\\hackathon2\\.conda"
VSCODE_ENV_REPLACE = "CONDA_DEFAULT_ENV=C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda:CONDA_EXE=C\x3a\Users\tayla\anaconda3\Scripts\conda.exe:CONDA_PREFIX=C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda:CONDA_PROMPT_MODIFIER=(C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda) :CONDA_PYTHON_EXE=C\x3a\Users\tayla\anaconda3\python.exe:CONDA_SHLVL=1:PROMPT=(C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda) $P$G:SSL_CERT_FILE=C\x3a\Users\tayla\OneDrive\Desktop\ml\hackathon2\.conda\Library\ssl\cacert.pem:CONDA_ROOT=C\x3a\\Users\\tayla\\anaconda3:_CONDA_OLD_CHCP=850:__CONDA_OPENSLL_CERT_FILE_SET=\"1\""
CONDA_EXE = "C:\\Users\\tayla\\anaconda3\\Scripts\\conda.exe"
CONDA_PREFIX = "C:\\Users\\tayla\\OneDrive\\Desktop\\ml\\hackathon2\\.conda"
CONDA_PROMPT_MODIFIER = "(C:\\Users\\tayla\\OneDrive\\Desktop\\ml\\hackathon2\\.conda) "
CONDA_PYTHON_EXE = "C:\\Users\\tayla\\anaconda3\\python.exe"
CONDA_SHLVL = 1
PROMPT = "(C:\\Users\\tayla\\OneDrive\\Desktop\\ml\\hackathon2\\.conda) $P$G"
SSL_CERT_FILE = "C:\\Users\\tayla\\OneDrive\\Desktop\\ml\\hackathon2\\.conda\\Library\\ssl\\cacert.pem"
CONDA_ROOT = "C:\\Users\\tayla\\anaconda3"
_CONDA_OLD_CHCP = 850
VSCODE_INJECTION = 1
VSCODE_NONCE = "84281bd9-71bb-48cd-88ba-8b71f7c8747f"
VSCODE_STABLE = 1

[PROMPT_DRIVER_FIX_STATIC_ERROR]
temperature = 0
system = "You are an experienced programming expert.\n"
user = "Here is a Python code snippet:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, errors occurred during static analysis:\n```\n{{ error_str|trim }}\n```\nPlease fix the code using the following approach:\n```\nError Analysis:\n{{ what_went_wrong | trim}}\nFix Process:\n{{ fixed_flow| trim}}\n```\n{%- if io_format == 'normal' %}\nGuidelines:\n- The code must use only one input() function to obtain an organized string contains the parameters for the function. You can directly pass the parameters using `*eval(input())`.\n- You must use only one print() statement to output the return value from the function you completed, without any additional words.\nThe code must follow the following structure within a markdown block:\n```python\ndef func(...):\n    ...\n    return ...\n\nif __name__ == \"__main__\":\n    print(func(*eval(input())))\n```\n{%- endif %}\n{%- if io_format == 'contest' %}\nGuidelines:\n- The code should read the input using the 'input()' method and properly parse it according to the problem description.\n- The output should be printed without additional words using the 'print()' method.\nThe code must follow the following structure within a markdown block:\n```python\ndef f1(...):\n    ...\n    return ...\n\ndef f2(...):\n    ...\n    return ...\n...\nif __name__ == \"__main__\":\n    ...\n```\n{%- endif %}\nAnswer:\n```python\n"

[PROMPT_DRIVER_FIX_TEST_FAILURE]
temperature = 0
system = "You are an experienced programming expert.\n"
user = "{%- if error_type == 'logic' %}\nYou are given a coding problem:\n{{ description_short|trim }}\nA Python code solution was generated for the problem:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, when running the following input example, the code solution above failed to produce the expected output:\n```\n{{ error_str|trim }}\n```\n{%- endif %}\n\n{%- if error_type == 'runtime' %}\nHere is a Python code snippet:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, errors occurred when execting this code:\n```\n{{ error_str|trim }}\n```\n{%- endif %}\n\n{%- if error_type == 'timeout' %}\nHere is a Python code snippet:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, a timeout error occurred when running this code:\n```\n{{ error_str|trim }}\n```\n{%- endif %}\nPlease fix the code using the following approach:\n```\nError Analysis:\n{{what_went_wrong| trim}}\nFix Process:\n{{fixed_flow| trim}}\n```\n{%- if io_format == 'normal' %}\nGuidelines:\n- The code must use only one input() function to obtain an organized string contains the parameters for the function. You can directly pass the parameters using `*eval(input())`.\n- You must use only one print() statement to output the return value from the function you completed, without any additional words.\nThe code must follow the following structure within a markdown block:\n```python\ndef func(...):\n    ...\n    return ...\n\nif __name__ == \"__main__\":\n    print(func(*eval(input())))\n```\n{%- endif %}\n{%- if io_format == 'contest' %}\nGuidelines:\n- The code should read the input using the 'input()' method and properly parse it according to the problem description.\n- The output should be printed without additional words using the 'print()' method.\nThe code must follow the following structure within a markdown block:\n```python\ndef f1(...):\n    ...\n    return ...\n\ndef f2(...):\n    ...\n    return ...\n...\nif __name__ == \"__main__\":\n    ...\n```\n{%- endif %}\nAnswer:\n```python\n"

[PROMPT_DRIVER_GENERATE_INITIAL_CODE]
temperature = 0
system = "You are an experienced programmer.\n"
user = "You are given a coding problem:\n{{ description|trim }}\nPlease generate a Python code to fully solve the problem using the following solution plan:\n{{ current_solution_str|trim }}\nEnsure the code includes all necessary module imports and has no Python syntax errors.\n{%- if io_format == 'normal' %}\nGuidelines:\n- The code must use only one input() function to obtain an organized string contains the parameters for the function. You can directly pass the parameters using `*eval(input())`.\n- You must use only one print() statement to output the return value from the function you completed, without any additional words.\nThe code must follow the following structure within a markdown block:\n```python\ndef func(...):\n    ...\n    return ...\n\nif __name__ == \"__main__\":\n    print(func(*eval(input())))\n```\n{%- endif %}\n{%- if io_format == 'contest' %}\nGuidelines:\n- The code should read the input using the 'input()' method and properly parse it according to the problem description.\n- The output should be printed without additional words using the 'print()' method.\nThe code must follow the following structure within a markdown block:\n```python\ndef f1(...):\n    ...\n    return ...\n\ndef f2(...):\n    ...\n    return ...\n...\nif __name__ == \"__main__\":\n    ...\n```\n{%- endif %}\nAnswer:\n```python\n"

[PROMPT_DIRECT_GENERATE_CODE]
temperature = 0
system = "You are an experienced programming expert.\n"
user = "Complete the following task in Python:\n{{ description | trim }}\n{%- if io_format == 'normal' %}\nGuidelines:\n- The code must use only one input() function to obtain an organized string contains the parameters for the function. You can directly pass the parameters using `*eval(input())`.\n- You must use only one print() statement to output the return value from the function you completed, without any additional words.\nThe code must follow the following structure within a markdown block:\n```python\ndef func(...):\n    ...\n    return ...\n\nif __name__ == \"__main__\":\n    print(func(*eval(input())))\n```\n{%- endif %}\n{%- if io_format == 'contest' %}\nGuidelines:\n- The code should read the input using the 'input()' method and properly parse it according to the problem description.\n- The output should be printed without additional words using the 'print()' method.\nThe code must follow the following structure within a markdown block:\n```python\ndef f1(...):\n    ...\n    return ...\n\ndef f2(...):\n    ...\n    return ...\n...\nif __name__ == \"__main__\":\n    ...\n```\n{%- endif %}\nOnly output the code without any additional text or explanations.\n```python\n"

[PROMPT_INPUT_OUTPUT_FORMAT]
contest = "Guidelines:\n- The code should read the input using the 'input()' method and properly parse it according to the problem description.\n- The output should be printed without additional words using the 'print()' method.\nThe code must follow the following structure within a markdown block:\n```python\ndef f1(...):\n    ...\n    return ...\n\ndef f2(...):\n    ...\n    return ...\n...\nif __name__ == \"__main__\":\n    ...\n```\n"
normal = "Guidelines:\n- The code must use only one input() function to obtain an organized string contains the parameters for the function. You can directly pass the parameters using `*eval(input())`.\n- You must use only one print() statement to output the return value from the function you completed, without any additional words.\nThe code must follow the following structure within a markdown block:\n```python\ndef func(...):\n    ...\n    return ...\n\nif __name__ == \"__main__\":\n    print(func(*eval(input())))\n```\n"

[PROMPT_NAVIGATOR_ANALYZE_STATIC_ERROR]
temperature = 0
system = "You are an experienced programming expert, skilled at analyzing code bugs and providing precise guidance for fixing them.\n"
user = "Here is a Python code snippet:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, errors occurred during static analysis:\n```\n{{ error_str|trim }}\n```\nBriefly explain the identified bug(s) by analyzing the code and static errors.\nProvide a step-by-step approach to fix the issues.\nKeep the fix steps concise for minor issues, but provide more detailed steps if major revisions are required.\n\nYour answer should be directly parsable as YAML. DO NOT output anything else.\nThe output must be a YAML object like this:\nExample YAML output:\n```yaml\nwhat_went_wrong: |\n  ...\nfixed_flow: |\n  ...\n```\nAnswer:\n```yaml\n"

[PROMPT_NAVIGATOR_ANALYZE_TEST_FAILURE]
temperature = 0
system = "You are an experienced and patient programming expert, skilled at analyzing code bugs and providing precise guidance for fixing them.\n"
user = "{%- if error_type == 'logic' %}\nYou are given a coding problem:\n{{ description_short|trim }}\nA Python code solution was generated for the problem:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, the code solution failed to produce the expected output:\n```\n{{ error_str|trim }}\n```\nIdentify and briefly explain the logical or functional errors in the code that prevent it from producing the expected output for the given input.\nProvide a step-by-step approach to fix the issues, ensuring the corrected code can handle all valid inputs correctly.\nKeep the fix steps concise for minor issues, but provide more detailed steps if major revisions are required.\n{%- endif %}\n\n{%- if error_type == 'runtime' %}\nHere is a Python code snippet:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, errors occurred when execting this code:\n```\n{{ error_str|trim }}\n```\nIdentify the specific part(s) of the code that causing runtime error and briefly explain what went wrong.\nProvide a step-by-step approach to fix the issues.\nKeep the fix steps concise for minor issues, but provide more detailed steps if major revisions are required.\n{%- endif %}\n\n{%- if error_type == 'timeout' %}\nHere is a Python code snippet:\n```\n{{ code_recent_solution|trim }}\n```\nHowever, the code failed to produce output within the time limit:\n```\n{{ error_str|trim }}\n```\nBrief explain the possible reasons, e.g., incorrect input/output handling or inefficient algorithm leading to timeouts.\nProvide a step-by-step approach to fix the issues.\nKeep the fix steps concise for minor issues, but provide more detailed steps if major revisions are required.\n{%- endif %}\n\nYour answer should be directly parsable as YAML. DO NOT output anything else.\nThe output must be a YAML object like this:\nExample YAML output:\n```yaml\nwhat_went_wrong: |\n  ...\nfixed_flow: |\n  ...\n```\nAnswer:\n```yaml\n"

[PROMPT_NAVIGATOR_CHOOSE_BEST_SOLUTION]
temperature = 0
system = "You are an experienced programmer.\n"
user = "You are given a coding problem:\n{{description|trim}}\nSelf-reflection on the problem:\n{{ self_reflection|trim }}\nHere is a list of {{ solutions_details|selectattr('tried', 'equalto', false)|list|length }} possible solutions to the problem, each preceded by its corresponding INDEX NUMBER.\n=======\n{{ candidate_solutions_str|trim }}\n=======\nChoose the most robust and correct solution and provide a brief explanation for your choice.\nThe selected solution should:\n1. Prioritize functional correctness over efficiency. If there is a simulation method or a direct brute force method available, prefer it.\n2. Fully solve the problem and correctly handle all possible valid inputs and edge cases as per the problem description.\n3. Consider more efficient methods only if they do not compromise correctness.\n\nGive the selected solutions their corresponding index numbers without altering them.\nThe output must be a YAML object like this:\nExample YAML output:\n```yaml\nINDEX_NUMBER: |\n  ...\nname: |\n  ...\nwhy: |\n  ...\n```\nAnswer:\n```yaml\n"

[PROMPT_NAVIGATOR_GENERATE_POSSIBLE_SOLUTIONS]
temperature = 0.8
n = 5
system = "You are an experienced programmer.\n"
user = "You are given a coding problem:\n{{description}}\nSelf-reflection on the problem:\n{{ self_reflection|trim }}\n{%- if use_test_explanations_possible_solutions %}\nHere are also explanations for public test cases:\n{{ tests_explanations_str|trim }}\n{%- endif %}\n\nProvide up to {{max_num_of_possible_solutions}} possible solution plans to the problem.\nEach solution plan should:\n1.Have a descriptive name.\n2.Outline the solution approach:\n   - For simple problems (e.g., reversing a list), provide a concise solution (e.g., we can directly use list1[::-1] to do it.).\n   - For complex problems (e.g., finding the shortest path in a graph), provide a problem-solving plan with high-level steps (e.g., we can use BFS to solve it. First, Initialize a queue with... Second, ...).\n  If necessary, select an appropriate algorithm through problem analysis such as brute force, simulation, greedy, hash map, two pointers, DFS/BFS, stack/queue, DP, etc.\n3.Ensure functional correctness by addressing all possible valid inputs and edge cases per problem description.\n\nYour answer should be directly parsable as YAML. DO NOT output anything else.\nThe output must be a YAML object like this:\nExample YAML output:\n```yaml\npossible_solutions:\n  - name: |\n      ...\n    content: |\n      ...\n  - name: |\n      ...\n    content: |\n      ...\n  ...\n```\nAnswer:\n```yaml\n"

[PROMPT_NAVIGATOR_GENERATE_REFLECTION]
temperature = 0
system = "You're an experienced programmer.\n"
user = "You are given a coding problem:\n{{description|trim}}\nGiven the coding problem, you have two tasks using natural language:\n1. reflect on the problem:\n   - For simple problems, briefly provide a concise explanation and note all possible valid inputs and edge cases. Avoid overthinking.\n   - For complex problems, provide a comprehensive analysis covering all aspects, details, nuances, and how to properly handle all possible valid inputs and edge cases per problem description.\n2. For {{actual_number_of_tests}} provided public test case(s) in description, briefly explain how the specified input yields the expected output based on the problem description.\nYour answer should be directly parsable as YAML. DO NOT output anything else.\nThe output must be a YAML object like this:\nExample YAML output:\n```yaml\nself_reflection:\n- |\n  ...\ntests_explanations:\n- input: |\n    ...\n  output: |\n    ..\n  explanation: |\n    ...\n...\n```\nAnswer:\n```yaml\n"

[OPENAI]
key = "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"

[CONFIG]
model = "gpt-3.5-turbo"
embedding_model = "text-embedding-3-large"
frequency_penalty = 0.1
ai_timeout = 90
fallback_models = []
verbosity_level = 2
private_dataset_cache_dir = "./"
max_requests_per_minute = 60

[DATASET]
evaluate_prev_solutions = false
num_iterations = 1
use_iteration_scheme = true

[SOLVE]
max_coding_count = 10
reduce_verbose = true
use_baseline = false
use_direct_solutions = false

[SELF_REFLECTION]
validate_self_reflection = false

[POSSIBLE_SOLUTIONS]
max_num_of_possible_solutions = 3
num_clusters = 3
use_test_explanations = true

[INITIAL_CODE_GENERATION]
max_attempts = 5
static_analysis = true

[PUBLIC_TESTS]
max_plan_attempts = 3
decision_maker = true
decision_method = "Function"
use_test_explanations = false
pair_fix = true

[CODE_TESTER]
tester_type = "local"
order_matters = true
sandbox = true
delta = 0.0001
calc_trace = false
use_trace = false
max_trace_lines = 50
trace_depth = 4

[CODE_CONTESTS_TESTER]
stop_on_first_failure = false
timeout = 3
path_to_python_bin = "/usr/bin/python3.9"
path_to_python_lib = [ "/usr/lib", "/usr/lib/python3.9",]

[""]
CONDA_OPENSLL_CERT_FILE_SET = "1"
