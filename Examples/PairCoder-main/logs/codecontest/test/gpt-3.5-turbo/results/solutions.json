{
    "test": {
        "0": {
            "iteration_0": {
                "solution": "def custom_sort_criteria(s):\n    return ''.join(sorted(s[::2])) + ''.join(sorted(s[1::2], reverse=True))\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    books = [input().strip() for _ in range(n)]\n    \n    sorted_indices = sorted(range(1, n+1), key=lambda x: custom_sort_criteria(books[x-1]))\n    \n    print(*sorted_indices)",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 117,
                "test_failed_generate": 83,
                "test_timeout_generate": 0
            }
        },
        "1": {
            "iteration_0": {
                "solution": "import math\n\ndef dist(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef orientation(p, q, r):\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0\n    return 1 if val > 0 else 2\n\ndef convex_hull(points):\n    n = len(points)\n    if n < 3:\n        return points\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n\n    p = l\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) == 2:\n                q = i\n        p = q\n        if p == l:\n            break\n\n    return hull\n\ndef check_valid_circle(center, radius, habitats, k):\n    count = 0\n    for habitat in habitats:\n        if dist(center, habitat) <= radius:\n            count += 1\n    return count >= k\n\ndef find_min_radius(n, k, habitats):\n    hull = convex_hull(habitats)\n    min_radius = float('inf')\n    \n    for i in range(len(hull)):\n        p1 = hull[i]\n        p2 = hull[(i + 1) % len(hull)]\n        center = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2]\n        radius = dist(p1, center)\n        \n        low = 0\n        high = 2 * 10**5\n        while high - low > 10**-6:\n            mid = (low + high) / 2\n            if check_valid_circle(center, mid, habitats, k):\n                high = mid\n                min_radius = min(min_radius, mid)\n            else:\n                low = mid\n\n    return min_radius\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    habitats = [list(map(int, input().split())) for _ in range(n)]\n    \n    result = find_min_radius(n, k, habitats)\n    print(\"{:.10f}\".format(result))",
                "test_passed_public": 2,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 2,
                "test_failed_private": 5,
                "test_timeout_private": 0,
                "test_passed_generate": 13,
                "test_failed_generate": 187,
                "test_timeout_generate": 0
            }
        },
        "2": {
            "iteration_0": {
                "solution": "MOD = 10**9 + 7\n\ndef count_segments(n, m, k, a):\n    total_sum = sum(a)\n    count_map = {}\n    curr_sum = 0\n    total_segments = 0\n\n    for num in a:\n        curr_sum += num\n        r = curr_sum % k\n        count_map[r] = count_map.get(r, 0) + 1\n        if r == 0:\n            total_segments += 1\n\n    segment_count = 0\n    for key in count_map:\n        segment_count += (count_map[key] * count_map[key]) % k\n\n    if k != 1:\n        total_segments = (total_segments + (segment_count * (m - 1)) * m) % MOD\n    else:\n        total_segments = (n * m) % MOD\n\n    return total_segments\n\nif __name__ == \"__main__\":\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    result = count_segments(n, m, k, a)\n    print(result)",
                "test_passed_public": 0,
                "test_failed_public": 3,
                "test_timeout_public": 0,
                "test_passed_private": 1,
                "test_failed_private": 2,
                "test_timeout_private": 0,
                "test_passed_generate": 4,
                "test_failed_generate": 196,
                "test_timeout_generate": 0
            }
        },
        "3": {
            "iteration_0": {
                "solution": "def count_divisible_numbers(s):\n    last_two_digits = ['25', '50', '75', '00']\n    count = 0\n\n    for last_digits in last_two_digits:\n        i = len(s) - 1\n        j = len(last_digits) - 1\n\n        while i >= 0 and j >= 0:\n            if s[i] == '_' or s[i] == last_digits[j]:\n                i -= 1\n                j -= 1\n            else:\n                break\n\n        if j == -1 and (i == -1 or s[i] != '0'):\n            count += 1\n\n    return count\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    print(count_divisible_numbers(s))",
                "test_passed_public": 1,
                "test_failed_public": 4,
                "test_timeout_public": 0,
                "test_passed_private": 14,
                "test_failed_private": 55,
                "test_timeout_private": 0,
                "test_passed_generate": 121,
                "test_failed_generate": 79,
                "test_timeout_generate": 0
            }
        },
        "4": {
            "iteration_0": {
                "solution": "MOD = 10**9 + 7\n\ndef dfs(node, parent, prefix_sum, k, graph, happiness, result):\n    total = prefix_sum[node]\n    for child, color in graph[node]:\n        if child != parent:\n            child_sum = dfs(child, node, prefix_sum, k, graph, happiness, result)\n            result[0] = (result[0] + child_sum) % MOD\n            total += max(0, child_sum)\n    \n    for i in range(len(graph[node])):\n        child, color = graph[node][i]\n        if child != parent:\n            for j in range(i + 1, len(graph[node])):\n                other_child, other_color = graph[node][j]\n                if other_child != parent:\n                    if color == other_color:\n                        result[0] = (result[0] + max(0, total - max(0, prefix_sum[child]) - max(0, prefix_sum[other_child]))) % MOD\n                    else:\n                        if k > 0:\n                            result[0] = (result[0] + max(0, total - max(0, prefix_sum[child]) - max(0, prefix_sum[other_child]))) % MOD\n                            k -= 1\n                        else:\n                            break\n    \n    return total\n\ndef solve():\n    n, k = map(int, input().split())\n    happiness = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    \n    for _ in range(n - 1):\n        u, v, t = map(int, input().split())\n        u -= 1\n        v -= 1\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    \n    prefix_sum = [0] * n\n    for i in range(n):\n        prefix_sum[i] = happiness[i]\n    \n    for node in range(n):\n        for child, _ in graph[node]:\n            if child != node:\n                prefix_sum[child] += prefix_sum[node]\n    \n    result = [0]\n    dfs(0, -1, prefix_sum, k, graph, happiness, result)\n    \n    print(result[0])\n\nif __name__ == \"__main__\":\n    solve()",
                "test_passed_public": 0,
                "test_failed_public": 2,
                "test_timeout_public": 0,
                "test_passed_private": 1,
                "test_failed_private": 1,
                "test_timeout_private": 0,
                "test_passed_generate": 12,
                "test_failed_generate": 188,
                "test_timeout_generate": 0
            }
        }
    }
}