{
    "test": {
        "0": {
            "iteration_0": {
                "solution": "def remove_Occ(s, c):\n    # Convert the string into a list of characters\n    s_list = list(s)\n    \n    # Remove the first occurrence of the character\n    s_list.remove(c)\n    \n    # Reverse the list and remove the last occurrence (which is now the first in the reversed list)\n    s_list.reverse()\n    s_list.remove(c)\n    \n    # Reverse the list back to its original order\n    s_list.reverse()\n    \n    # Join the list into a string using the join() method\n    s = ''.join(s_list)\n    \n    # Return the resulting string\n    return s\n\nif __name__ == \"__main__\":\n    print(remove_Occ(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "1": {
            "iteration_0": {
                "solution": "def sort_matrix(matrix):\n    matrix.sort(key=sum)\n    return matrix\n\nif __name__ == \"__main__\":\n    print(sort_matrix(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "2": {
            "iteration_0": {
                "solution": "def count_common(words):\n    word_counts = {}\n    for word in words:\n        if word not in word_counts:\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n    sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_word_counts\n\nif __name__ == \"__main__\":\n    print(count_common(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 3,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "3": {
            "iteration_0": {
                "solution": "def find_Volume(base_length, height_of_triangle, height_of_prism):\n    base_area = 0.5 * base_length * height_of_triangle\n    volume = base_area * height_of_prism\n    return volume\n\nif __name__ == \"__main__\":\n    print(find_Volume(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "4": {
            "iteration_0": {
                "solution": "def split_lowerstring(s):\n    result = ['']\n    for char in s:\n        if char.islower():\n            result.append('')\n        else:\n            result[-1] += char\n    return result\n\nif __name__ == \"__main__\":\n    print(split_lowerstring(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 3,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "5": {
            "iteration_0": {
                "solution": "def text_lowercase_underscore(text):\n    import re\n    if not text or not re.search('[a-z]', text):\n        return 'No match found'\n    if re.search('[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'No match found'\n\nif __name__ == \"__main__\":\n    print(text_lowercase_underscore(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 1,
                "test_failed_private": 2,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "6": {
            "iteration_0": {
                "solution": "square_perimeter = lambda side: side * 4\n\nif __name__ == \"__main__\":\n    print(square_perimeter(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "7": {
            "iteration_0": {
                "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([char for char in s1 if char not in s2])\n\nif __name__ == \"__main__\":\n    print(remove_dirty_chars(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "8": {
            "iteration_0": {
                "solution": "\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\nif __name__ == \"__main__\":\n    print(test_duplicate(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "9": {
            "iteration_0": {
                "solution": "def is_woodall(num):\n    n = 1\n    while n * 2**n - 1 <= num:\n        if n * 2**n - 1 == num:\n            return True\n        n += 1\n    return False\n\nif __name__ == \"__main__\":\n    print(is_woodall(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "10": {
            "iteration_0": {
                "solution": "def multiples_of_num(m, n):\n    result = []\n    for i in range(1, m+1):\n        result.append(i*n)\n    return result\n\nif __name__ == \"__main__\":\n    print(multiples_of_num(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "11": {
            "iteration_0": {
                "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 2,
                "test_failed_private": 1,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "12": {
            "iteration_0": {
                "solution": "def maximum_Sum(list_of_lists):\n    max_sum = 0\n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nif __name__ == \"__main__\":\n    print(maximum_Sum(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "13": {
            "iteration_0": {
                "solution": "def binary_to_decimal(binary):\n    binary = str(binary)\n    return int(binary, 2)\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "14": {
            "iteration_0": {
                "solution": "\ndef find_Product(arr, n):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Initialize product to 1\n    product = 1\n\n    # Iterate over the keys in the dictionary and calculate the product of those keys which occur only once\n    for key in count_dict:\n        if count_dict[key] == 1:\n            product *= key\n\n    return product\n\nif __name__ == \"__main__\":\n    print(find_Product(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "15": {
            "iteration_0": {
                "solution": "def check_k_elements(tuples, k):\n    return all(len(t) <= k for t in tuples)\n\nif __name__ == \"__main__\":\n    print(check_k_elements(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 2,
                "test_failed_private": 1,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "16": {
            "iteration_0": {
                "solution": "def remove_digits(strings):\n    import re\n    return [re.sub(r'\\d', '', s) for s in strings]\n\nif __name__ == \"__main__\":\n    print(remove_digits(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "17": {
            "iteration_0": {
                "solution": "def binomial_Coeff(n, k):\n    dp = [[0 for x in range(k+1)] for x in range(n+1)]\n \n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n \n    return dp[n][k]\n\nif __name__ == \"__main__\":\n    print(binomial_Coeff(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "18": {
            "iteration_0": {
                "solution": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for i in count_dict:\n        if count_dict[i] % 2 != 0:\n            return i\n\nif __name__ == \"__main__\":\n    print(get_Odd_Occurrence(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "19": {
            "iteration_0": {
                "solution": "def count_Substring_With_Equal_Ends(s):\n    count = [0]*256\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n    result = 0\n    for i in range(256):\n        result += (count[i]*(count[i] + 1))//2\n    return result\n\nif __name__ == \"__main__\":\n    print(count_Substring_With_Equal_Ends(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "20": {
            "iteration_0": {
                "solution": "from collections import Counter\nimport heapq\n\ndef func(lists, k):\n    # Count the frequency of each integer\n    freq = Counter()\n    for l in lists:\n        freq.update(l)\n    \n    # Create a heap queue with the frequency count\n    heap = []\n    for num, count in freq.items():\n        heapq.heappush(heap, (-count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Return the top k integers\n    return [num for count, num in heap]\n\nif __name__ == \"__main__\":\n    print(func(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 3,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "21": {
            "iteration_0": {
                "solution": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nif __name__ == \"__main__\":\n    print(max_Prime_Factors(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "22": {
            "iteration_0": {
                "solution": "def decimal_To_Binary(n):\n    binary = \"\"\n    if n == 0:\n        return '0'\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)\n\nif __name__ == \"__main__\":\n    print(decimal_To_Binary(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        }
    }
}