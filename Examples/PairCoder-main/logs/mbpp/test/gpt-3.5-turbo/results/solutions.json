{
    "test": {
        "0": {
            "iteration_0": {
                "solution": "def remove_Occ(s, char):\n    if not s:\n        return \"\"\n    \n    first_occ = s.find(char)\n    if first_occ == -1:\n        return s\n    \n    last_occ = s.rfind(char)\n    \n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n\nif __name__ == \"__main__\":\n    print(remove_Occ(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "1": {
            "iteration_0": {
                "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\nif __name__ == \"__main__\":\n    print(sort_matrix(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "2": {
            "iteration_0": {
                "solution": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common(4)\n\nif __name__ == \"__main__\":\n    print(count_common(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "3": {
            "iteration_0": {
                "solution": "def find_Volume(base_length, base_width, height):\n    if base_length <= 0 or base_width <= 0 or height <= 0:\n        return \"Invalid input. Dimensions must be positive.\"\n    return 0.5 * base_length * base_width * height\n\nif __name__ == \"__main__\":\n    print(find_Volume(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "4": {
            "iteration_0": {
                "solution": "def split_lowerstring(s):\n    return [s[i:j] for i, j in zip([0] + [i for i, c in enumerate(s) if c.islower()], [i for i, c in enumerate(s) if c.islower()] + [len(s)])]\n\nif __name__ == \"__main__\":\n    print(split_lowerstring(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 0,
                "test_failed_private": 3,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "5": {
            "iteration_0": {
                "solution": "def text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].islower():\n            if i+1 < len(text) and text[i+1] == '_':\n                j = i + 2\n                while j < len(text) and text[j].islower():\n                    j += 1\n                if j > i + 2:\n                    return 'Found a match!'\n    return 'No match found'\n\nif __name__ == \"__main__\":\n    print(text_lowercase_underscore(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 1,
                "test_failed_private": 2,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "6": {
            "iteration_0": {
                "solution": "def square_perimeter(side_length):\n    if side_length <= 0:\n        return \"Invalid input\"\n    return side_length * 4\n\nif __name__ == \"__main__\":\n    print(square_perimeter(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "7": {
            "iteration_0": {
                "solution": "def remove_dirty_chars(s1, s2):\n    s2_set = set(s2)\n    result = ''\n    for char in s1:\n        if char not in s2_set:\n            result += char\n    return result\n\nif __name__ == \"__main__\":\n    print(remove_dirty_chars(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "8": {
            "iteration_0": {
                "solution": "def test_duplicate(arr):\n    unique_set = set()\n    for num in arr:\n        if num in unique_set:\n            return True\n        unique_set.add(num)\n    return False\n\nif __name__ == \"__main__\":\n    print(test_duplicate(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "9": {
            "iteration_0": {
                "solution": "def is_woodall(num):\n    n = 1\n    while True:\n        woodall = n * 2**n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            return False\n        n += 1\n\nif __name__ == \"__main__\":\n    print(is_woodall(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "10": {
            "iteration_0": {
                "solution": "def multiples_of_num(m, n):\n    if not isinstance(m, int) or not isinstance(n, int) or m <= 0 or n <= 0:\n        return \"Invalid inputs. Please provide positive integers for m and n.\"\n\n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(n * i)\n\n    return multiples\n\nif __name__ == \"__main__\":\n    print(multiples_of_num(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "11": {
            "iteration_0": {
                "solution": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 2,
                "test_failed_private": 1,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "12": {
            "iteration_0": {
                "solution": "def maximum_Sum(lists):\n    return max(sum(sublist) for sublist in lists)\n\nif __name__ == \"__main__\":\n    print(maximum_Sum(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "13": {
            "iteration_0": {
                "solution": "def binary_to_decimal(binary):\n    result = 0\n    power = 0\n    for bit in str(binary)[::-1]:\n        if bit == '1':\n            result += 2 ** power\n        power += 1\n    return result\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "14": {
            "iteration_0": {
                "solution": "def find_Product(arr, n):\n    element_count = {}\n    product = 1\n\n    for element in arr:\n        if element not in element_count:\n            element_count[element] = 1\n        else:\n            element_count[element] += 1\n\n    for key, value in element_count.items():\n        if value == 1:\n            product *= key\n\n    return product\n\nif __name__ == \"__main__\":\n    print(find_Product(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "15": {
            "iteration_0": {
                "solution": "def check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(check_k_elements(*eval(input())))",
                "test_passed_public": 0,
                "test_failed_public": 1,
                "test_timeout_public": 0,
                "test_passed_private": 1,
                "test_failed_private": 2,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "16": {
            "iteration_0": {
                "solution": "def remove(strings):\n    return [''.join([c for c in s if not c.isdigit()]) for s in strings]\n\nif __name__ == \"__main__\":\n    print(remove(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "17": {
            "iteration_0": {
                "solution": "def binomial_Coeff(n, k):\n    if n == 0 or k == 0:\n        return 1\n\n    triangle = [[1] * (i + 1) for i in range(n + 1)]\n\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n\n    return triangle[n][k]\n\nif __name__ == \"__main__\":\n    print(binomial_Coeff(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "18": {
            "iteration_0": {
                "solution": "from collections import Counter\n\ndef get_Odd_Occurrence(arr, n):\n    count = Counter(arr)\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\nif __name__ == \"__main__\":\n    print(get_Odd_Occurrence(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "19": {
            "iteration_0": {
                "solution": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_Substring_With_Equal_Ends(*eval(input())))",
                "test_passed_public": 1,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 3,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        }
    }
}