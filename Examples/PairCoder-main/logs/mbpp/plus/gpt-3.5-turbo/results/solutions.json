{
    "plus": {
        "0": {
            "iteration_0": {}
        },
        "1": {
            "iteration_0": {
                "solution": "import math\n\ndef is_not_prime(num):\n    if num <= 1:\n        return True\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(is_not_prime(*eval(input())))",
                "test_passed_public": 5,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 103,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "2": {
            "iteration_0": {
                "solution": "def heap_queue_largest(nums, n):\n    if not nums or n <= 0:\n        return []\n    \n    sorted_nums = sorted(nums, reverse=True)\n    return sorted_nums[:n]\n\nif __name__ == \"__main__\":\n    print(heap_queue_largest(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 106,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "3": {
            "iteration_0": {
                "solution": "def differ_At_One_Bit_Pos(x, y):\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    max_len = max(len(x_bin), len(y_bin))\n    x_bin = x_bin.zfill(max_len)\n    y_bin = y_bin.zfill(max_len)\n    \n    count_diff = 0\n    for i in range(max_len):\n        if x_bin[i] != y_bin[i]:\n            count_diff += 1\n            if count_diff > 1:\n                return False\n    \n    return count_diff == 1\n\nif __name__ == \"__main__\":\n    print(differ_At_One_Bit_Pos(*eval(input())))",
                "test_passed_public": 6,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 90,
                "test_failed_private": 18,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "4": {
            "iteration_0": {
                "solution": "def find_char_long(s):\n    words = s.split()\n    filtered_words = list(filter(lambda x: len(x) >= 4, words))\n    return filtered_words\n\nif __name__ == \"__main__\":\n    print(find_char_long(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 66,
                "test_failed_private": 36,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "5": {
            "iteration_0": {
                "solution": "def square_nums(nums):\n    return [num**2 for num in nums]\n\nif __name__ == \"__main__\":\n    print(square_nums(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 103,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "6": {
            "iteration_0": {
                "solution": "def find_Rotations(s):\n    min_rotations = len(s)\n    for i in range(1, len(s)):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            min_rotations = min(min_rotations, i)\n    return min_rotations\n\nif __name__ == \"__main__\":\n    print(find_Rotations(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 101,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "7": {
            "iteration_0": {
                "solution": "def remove_Occ(s, char):\n    first_occ = s.find(char)\n    last_occ = s.rfind(char)\n    if first_occ != -1 and last_occ != -1:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    else:\n        return s\n\nif __name__ == \"__main__\":\n    print(remove_Occ(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 103,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "8": {
            "iteration_0": {
                "solution": "def sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\nif __name__ == \"__main__\":\n    print(sort_matrix(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 106,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "9": {
            "iteration_0": {
                "solution": "def find_Volume(base, height, prism_height):\n    base_area = (base * height) / 2\n    volume = base_area * prism_height\n    return volume\n\nif __name__ == \"__main__\":\n    print(find_Volume(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 108,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "10": {
            "iteration_0": {
                "solution": "def text_lowercase_underscore(s):\n    segments = s.split('_')\n    for segment in segments:\n        if not segment.islower():\n            return False\n    return any(segment.islower() for segment in segments)\n\nif __name__ == \"__main__\":\n    print(text_lowercase_underscore(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 113,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "11": {
            "iteration_0": {
                "solution": "def square_perimeter(side_length):\n    if side_length == 0:\n        return 0\n    return side_length * 4\n\nif __name__ == \"__main__\":\n    print(square_perimeter(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 101,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "12": {
            "iteration_0": {
                "solution": "def remove_dirty_chars(s1, s2):\n    s2_set = set(s2)\n    result = ''\n    for char in s1:\n        if char not in s2_set:\n            result += char\n    return result\n\nif __name__ == \"__main__\":\n    print(remove_dirty_chars(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 104,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "13": {
            "iteration_0": {
                "solution": "def test_duplicate(nums):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    print(test_duplicate(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 102,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "14": {
            "iteration_0": {
                "solution": "def is_woodall(num):\n    n = 1\n    while True:\n        woodall = n * 2**n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            return False\n        n += 1\n\nif __name__ == \"__main__\":\n    print(is_woodall(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 101,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "15": {
            "iteration_0": {
                "solution": "def check(num):\n    rev_num = int(str(num)[::-1])\n    doubled_rev = rev_num * 2\n    result = doubled_rev - 1\n    return result == num\n\nif __name__ == \"__main__\":\n    print(check(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 125,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "16": {
            "iteration_0": {
                "solution": "def find_Max_Num(digits):\n    sorted_digits = sorted(digits, reverse=True)\n    largest_num = int(''.join(map(str, sorted_digits)))\n    return largest_num\n\nif __name__ == \"__main__\":\n    print(find_Max_Num(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 102,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "17": {
            "iteration_0": {
                "solution": "def opposite_Signs(num1, num2):\n    return (num1 < 0) != (num2 < 0)\n\nif __name__ == \"__main__\":\n    print(opposite_Signs(*eval(input())))",
                "test_passed_public": 4,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 105,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "18": {
            "iteration_0": {
                "solution": "def is_octagonal(n):\n    return n * (3*n - 2)\n\nif __name__ == \"__main__\":\n    print(is_octagonal(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 101,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        },
        "19": {
            "iteration_0": {
                "solution": "def count_Substrings(s):\n    def is_valid_substring(sub):\n        return sum(int(digit) for digit in sub) == len(sub)\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_valid_substring(s[i:j]):\n                count += 1\n\n    return count\n\nif __name__ == \"__main__\":\n    print(count_Substrings(*eval(input())))",
                "test_passed_public": 3,
                "test_failed_public": 0,
                "test_timeout_public": 0,
                "test_passed_private": 102,
                "test_failed_private": 0,
                "test_timeout_private": 0,
                "test_passed_generate": 0,
                "test_failed_generate": 0,
                "test_timeout_generate": 0
            }
        }
    }
}